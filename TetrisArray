import java.util.ArrayList;

public class TetrisArray {
	private Point[][] array = new Point[Grid.ROWS][Grid.HEIGHT];

	public static final int BELOW = 0;
	public static final int LEFT = 1;
	public static final int RIGHT = 2;

	public TetrisArray() {
		for (int i = 0; i < Grid.ROWS; i++) {
			for (int j = 0; j < Grid.HEIGHT; j++) {
				array[i][j] = Point.EMPTY;
			}
		}
	}

	public Point getPoint(int r, int c) {
		return array[r][c];
	}

	public void setPoint(int r, int c, Point p) {
		array[r][c] = p;
	}

	public boolean hasPointAt(int r, int c) {
		boolean hasPoint = false;
		for (Point p : Point.getSetMinoList()) {
			if (array[r][c] == p) {
				hasPoint = true;
			}
		}
		return hasPoint;
	}
	
	public boolean checkCollision(Tetromino mino, int direction) {
		boolean collides = false;
		for (int[] coord : mino.getPos()) {
			int row = coord[0];
			int col = coord[1];
			if (checkCollision(row, col, direction)) {
				collides = true;
			}
		}
		return collides;
	}
	
	public boolean checkCollision(int[][] coords, int direction) {
		boolean collides = false;
		for (int[] coord : coords) {
			int row = coord[0];
			int col = coord[1];
			if (checkCollision(row, col, direction)) {
				collides = true;
			}
		}
		return collides;
	}
	
	public boolean checkCollision(int r, int c, int direction) {
		boolean collides = false;
		Point pointToCheck = null;
		if (r != Grid.ROWS - 1 && direction == BELOW) {
			pointToCheck = array[r+1][c];
		}
		else if (c != 0 && direction == LEFT) {
			pointToCheck = array[r][c-1];
		}
		else if (c != Grid.COLS - 1 && direction == RIGHT) {
			pointToCheck = array[r][c+1];
		}
		for (Point p : Point.getSetMinoList()) {
			if (pointToCheck == p) {
				collides = true;
			}
		}
		return collides;
	}
	
	public boolean lineFilled(int r) {
		boolean filled = true;
		for (Point p : array[r]) {
			if (!p.isSetPoint()) {
				filled = false;
			}
		}
		return filled;
	}
	
	public boolean lineFilled(Point[] row) {
		boolean filled = true;
		for (Point p : row) {
			if (!p.isSetPoint()) {
				filled = false;
			}
		}
		return filled;
	}
	
	public ArrayList<Point[]> getFilledLines() {
		ArrayList<Point[]> filledLines = new ArrayList<Point[]>();
		for (Point[] row : array) {
			if (lineFilled(row)) {
				filledLines.add(row);
			}
		}
		return filledLines;
	}
	
	public void clearLines(ArrayList<Point[]> filledLines) {
		for (Point[] row : filledLines) {
			
		}
	}
}
