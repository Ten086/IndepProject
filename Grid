import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;

import javax.swing.*;

public class Grid extends JPanel implements KeyListener, ActionListener {

	public static final int WIDTH = 500;
	public static final int HEIGHT = WIDTH * 2;
	public static final int BOXSIZE = 40;
	public static final int ROWS = 20;
	public static final int COLS = 10;
	public static final int XMARGIN = (WIDTH - (COLS * BOXSIZE)) / 2;
	public static final int YMARGIN = (HEIGHT - (ROWS * BOXSIZE)) / 2;

	public static final Color LIGHTBLUE = new Color(3, 243, 241);
	public static final Color DARKBLUE = new Color (3, 0, 235);
	public static final Color ORANGE = new Color(246, 155, 1);
	public static final Color YELLOW = new Color(237, 242, 6);
	public static final Color GREEN = new Color (5, 239, 7);
	public static final Color PURPLE = new Color(164, 4, 229);
	public static final Color RED = new Color(234, 4, 4);
 
	private ArrayList<Tetromino> minos = new ArrayList<Tetromino>();
	private Tetromino currentMino;
	private TetrisArray array = new TetrisArray();
	
	public static void main(String[] args) {
		JFrame f = new JFrame();
		int actualWidth = WIDTH + 26;
		int actualHeight = HEIGHT + 60;
		f.setMinimumSize(new Dimension(actualWidth, actualHeight));
		f.setMaximumSize(new Dimension(actualWidth, actualHeight));
		Grid grid = new Grid();
		f.setContentPane(grid);	
		f.addKeyListener(grid);
		f.setVisible(true);
		Tetromino mino = new Tetromino(TetrominoShape.O);
		int[][] testPos = {{0,0},{0,1},{1,0},{1,1}};
		grid.addMino(mino);
		grid.setCurrentMino(mino);
		grid.setUpTimer();
	}
	
	public void setUpTimer() {
		Timer timer = new Timer(1000, this);
		timer.setInitialDelay(1000);
		timer.start();
	}

	public void addMino(Tetromino mino) {
		minos.add(mino);
	}

	public void setCurrentMino(Tetromino mino) {
		currentMino = mino;
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		drawGrid(g);
		drawMino(g, currentMino);
		drawFromArray(g);
	}

	public void drawGrid(Graphics g) {
		g.setColor(Color.BLACK);
		for (int c = 0; c < COLS; c++) {
			for (int r = 0; r < ROWS; r++) {
				g.drawRect((c * BOXSIZE) + XMARGIN, (r * BOXSIZE) + YMARGIN, BOXSIZE, BOXSIZE);
			}
		}
	}

	public void drawBox(Graphics g, Color c, int row, int col) {
		int xPos = XMARGIN + (col * BOXSIZE);
		int yPos = YMARGIN + (row * BOXSIZE);
		g.setColor(c);
		g.fillRect(xPos + 1, yPos + 1, BOXSIZE - 1, BOXSIZE - 1);
	}

	public void drawMino(Graphics g, Tetromino t) {
		int[][] pos = t.getPos();
		for (int[] coord : pos) {
			drawBox(g, t.getShape().getColor(), coord[0], coord[1]);
		}
	}

	public void drawFromArray(Graphics g) {
		for (int r = 0; r < ROWS; r++) {
			for (int c = 0; c < COLS; c++) {
				Point p = array.getPoint(r, c);
				if (p != Point.EMPTY && p != Point.CURRMINO) {
					drawBox(g, p.getColor(), r, c);
				}
				
			}
		}
	}
	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		//System.out.println(e.toString());
		int keyInt = e.getKeyCode();
		boolean onLeftEdge = false;
		boolean onRightEdge = false;
		
		for (int[] coord : currentMino.getPos()) {
			int row = coord[0];
			int col = coord[1];
			if (col == 0)
				onLeftEdge = true;
			else if (col == COLS - 1)
				onRightEdge = true;
			//else if (row below mino's row has fixed mino)
		}

		if (keyInt == 37 && !onLeftEdge) //left
			currentMino.changePos(0, -1);
		else if (keyInt == 39 && !onRightEdge) //right
			currentMino.changePos(0, 1);
		else if (keyInt == 40)
			currentMino.changePos(1, 0); //down
		
		for (int[] coord : currentMino.getPos()) {
			array.setPoint(coord[0], coord[1], Point.CURRMINO);
		}
		repaint();
	}

	public void keyReleased(KeyEvent arg0) {
	}

	public void keyTyped(KeyEvent arg0) {
	}

	public void actionPerformed(ActionEvent arg0) {
		currentMino.changePos(1, 0);
		repaint();
	}
}
